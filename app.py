
import streamlit as st
from streamlit_sortables import sort_items
import os
from io import BytesIO
from utils.clustering_comments_dbscan import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
from utils.search_notebooks import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ—É—Ç–±—É–∫–∞–º
from utils.results_students import * # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

st.markdown(
    """
    <style>
        #–∑–∞–≥—Ä—É–∑—á–∏–∫
        [data-testid="stFileUploaderDropzoneInstructions"] div::before {color:black; font-size: 0.9em; content:"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç—è–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞"}
        [data-testid="stFileUploaderDropzoneInstructions"] div span{display:none;}
        [data-testid="stFileUploaderDropzoneInstructions"] div::after {color:black; font-size: .8em; content:"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç—è–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞\A–õ–∏–º–∏—Ç 200MB –Ω–∞ —Ñ–∞–π–ª";white-space: pre; /* –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ */}
        [data-testid="stFileUploaderDropzoneInstructions"] div small{display:none;}
        [data-testid="stFileUploaderDropzoneInstructions"] button{display:flex;width: 30%; padding: 0px;}
        [data-testid="stFileUploaderDropzone"]{background-color:white; border-radius: 15px; /* –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã */border: 2px solid #4985c1; /* –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ */}
    
        /* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-baseweb="select" */
    [data-baseweb="select"] {
        background-color: white !important; /* –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
        color: black !important; /* –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç */
        border: 2px solid #4985c1; /* –õ–µ–≥–∫–∞—è —Å–∏–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ */
        border-radius: 12px; /* –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã */
        padding: 5px; /* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–≥–æ—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞ */
    [data-baseweb="select"] .st-cg {
        background-color: white !important; /* –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
        border: 1px solid white !important; /* –ë–µ–ª–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–º–∫–∞ */
    }

    /* –¢–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ select */
    [data-baseweb="select"] .st-d8 {
        color: black !important; /* –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è */
    }

    /* –î–ª—è input –≤–Ω—É—Ç—Ä–∏ select */
    [data-baseweb="select"] input {
        background-color: white !important; /* –ë–µ–ª—ã–π —Ñ–æ–Ω */
        color: black !important; /* –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç */
    }

    /* –î–ª—è SVG –∏ –∏–∫–æ–Ω–∫–∏ —Å—Ç—Ä–µ–ª–∫–∏ */
    [data-baseweb="select"] svg {
        fill: black !important; /* –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ */
    }    
    </style>
    """,
    unsafe_allow_html=True
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –∏ —Ç–µ–∫—Å—Ç—É
def sort_files_by_number(files):
    def extract_key(file_name):
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏: —Ç–µ–∫—Å—Ç –∏ —á–∏—Å–ª–æ
        match = re.match(r'(.*?)(\d+)(.*)', file_name)
        if match:
            prefix, number, suffix = match.groups()
            return (prefix.strip(), int(number), suffix.strip())
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ –∫–ª—é—á
            return (file_name, 0, "")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º –∫–ª—é—á–∞–º
    return sorted(files, key=lambda f: extract_key(f.name))



st.title("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü")
# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ—É—Ç–±—É–∫–∞–º", "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"])


# --- –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ---
with tab1:
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤! üëãüèª")
    st.write("üìÑ –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx) –Ω–∞ Google –î–∏—Å–∫–µ.")
    st.write("‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä—ã.")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü", type=['xlsx'],accept_multiple_files=False,key="fileUploader")

    if uploaded_file is not None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
        with open(f"./temp/{uploaded_file.name}", "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        file_path = f"./temp/{uploaded_file.name}"
        clustered_data = main(file_path, "–°—Ç—É–¥–µ–Ω—Ç", "–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if clustered_data is not None:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
            def highlight_tasks_and_clusters(val):
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '---', –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                if '---' in str(val):
                    return 'background-color: #ccffcc;'  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
                return ""  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            styled_data = clustered_data.style.map(highlight_tasks_and_clusters)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é
            styled_data = clustered_data.style.map(highlight_tasks_and_clusters)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—à–∏—Ä–∏–Ω—É –∫ —Å—Ç–æ–ª–±—Ü–∞–º
            col_widths = {
                col: max(clustered_data[col].astype(str).map(len).max(), len(col)) + 5
                for col in clustered_data.columns
            }
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            for col, width in col_widths.items():
                styled_data.set_properties(subset=[col], **{'width': f'{width}ch'})

            st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:")
            st.table(styled_data)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º DataFrame —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π
        else:
            st.write("–û—à–∏–±–∫–∞: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã—Ö.")

# --- –ü–æ–∏—Å–∫ –ø–æ –Ω–æ—É—Ç–±—É–∫–∞–º ---
with tab2:
    
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ Jupyter –Ω–æ—É—Ç–±—É–∫–∞–º üìÇ")
    
    st.write("""**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§–ë–ú–§**: –ø—Ä–æ—à–ª—ã–µ –∑–∞–¥–∞–Ω–∏—è –ª–µ–∂–∞—Ç –≤ ThetaHat.–ú–∞—Ç–µ—Ä–∏–∞–ª—ã | NDA | –¥–æ—Å—Ç—É–ø = ph@ds => Phystech@DataScience => **Ph@DS –í–ï–°–ù–ê 2024**""")
    st.write("""**Ph@ds**: –ø—Ä–æ—à–ª—ã–µ –∑–∞–¥–∞–Ω–∏—è –ª–µ–∂–∞—Ç –≤ ThetaHat.–ú–∞—Ç–µ—Ä–∏–∞–ª—ã | NDA | –¥–æ—Å—Ç—É–ø = ph@ds => Phystech@DataScience => **Ph@DS –û–°–ï–ù–¨ 2023**""")

    # –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
    index_base_dir = "index"

    st.subheader("–ü–æ–∏—Å–∫ –ø–æ –Ω–æ—É—Ç–±—É–∫–∞–º")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(index_base_dir):
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ `index`
        index_names = [name for name in os.listdir(index_base_dir) if os.path.isdir(os.path.join(index_base_dir, name))]

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏, –≤—ã–≤–æ–¥–∏–º –∏—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞
        if index_names:
            selected_index = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞", index_names)

            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
            selected_index_path = os.path.join(index_base_dir, selected_index)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
            index_searcher = IndexSearcher(selected_index_path)

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_word = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            if st.button("–ò—Å–∫–∞—Ç—å") and search_word:
                results = index_searcher.search(search_word)
                if results:
                    st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                    for path in results:
                        st.write(path)  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                else:
                    st.write("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if st.button("–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫–æ–≤–∏–∫"):
                index_searcher.close()
                st.write("–ü–æ–∏—Å–∫–æ–≤–∏–∫ –∑–∞–∫—Ä—ã—Ç.")
        else:
            st.warning("–í –ø–∞–ø–∫–µ `index` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏.")
    else:
        st.error("–ü–∞–ø–∫–∞ `index` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è.")

# --- –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å ---
with tab3:

    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∑–∞ —Å–µ–º–µ—Å—Ç—Ä!üëãüèª ")
    
    st.markdown("""
    –° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:
    - **–°–æ–±—Ä–∞—Ç—å –±–∞–ª–ª—ã –ø–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º** üìù
    - **–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–æ—Ç–µ** üí¨
    - **–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π** üìÖ
    """)

    st.markdown("---")


     # –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞
    selected_block = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
        ("–ê–≥—Ä–µ–≥–∞—Ü–∏—è –±–∞–ª–ª–æ–≤", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤", "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å")
    )

    # --- –ë–ª–æ–∫ 1: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –±–∞–ª–ª–æ–≤ ---
    if selected_block == "–ê–≥—Ä–µ–≥–∞—Ü–∏—è –±–∞–ª–ª–æ–≤":
        # --- –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å ---
        st.header("–ê–≥—Ä–µ–≥–∞—Ü–∏—è –±–∞–ª–ª–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")

        st.markdown("""
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤:

        1. üì• **–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª** *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.xlsx* —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        2. üìÅ **–°–∫–∞—á–∞–π—Ç–µ –ø–∞–ø–∫—É** *'–ü—Ä–æ–≤–µ—Ä–∫–∞ –î–ó'* —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å Google –î–∏—Å–∫–∞.
        """)

        st.divider()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        students = []
        # –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        excluded_students = ['–¢–µ—Å—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–¢–µ—Å—Ç –ê–Ω–Ω–∞', '–¢–µ—Å—Ç –¢–µ—Å—Ç2', '–¢–µ—Å—Ç–æ–≤ –ù–∏–∫', '–¢–µ—Å—Ç –ù–∏–∫–∏—Ç–∞', '–¢–µ—Å—Ç –§–æ—Ç–æ—Ñ–æ–Ω']

        # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –°–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.markdown("### –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

        st.markdown("""
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.xlsx* –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.
        """)
        option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))

        if option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã":
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", type=["xlsx"])
            if uploaded_file:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
                st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                students = get_students_from_file(uploaded_file, excluded_students)
        else:
            # –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            students_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:")
            students = students_input.split("\n")
            students = [s.strip() for s in students if s.strip()]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–æ–π
        if not students:
            st.warning("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            with st.expander("C–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"):
                editable_students = st.text_area("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", "\n".join(students))
                students = editable_students.split("\n")
                students = [s.strip() for s in students if s.strip()]
            
  
            st.subheader('–ë–∞–ª–ª—ã')
            st.markdown("""
            <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã.
            </p>
            """, unsafe_allow_html=True)
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            @st.cache_data(ttl=3600)
            def load_and_extract_sum_types(file):
                try:
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—É–º–º –∏–∑ —Ñ–∞–π–ª–∞
                    sum_types = pd.read_excel(file, sheet_name='–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', skiprows=3, usecols="C:D", header=None).dropna(how='all')
                    return sum_types.iloc[:, 0].dropna().astype(str).tolist()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file.name}: {e}")
                    return []
            if "previous_files" not in st.session_state:  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤
                st.session_state["previous_files"] = []
            if "good_cols" not in st.session_state:
                st.session_state["good_cols"] = []
            if "display_mode" not in st.session_state:
                st.session_state["display_mode"] = "–í—Å–µ —Ç–∏–ø—ã —Å—É–º–º"
            # –§–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if "aggregation_needs_update" not in st.session_state:
                st.session_state["aggregation_needs_update"] = False    
            if "result_table_main" not in st.session_state:
                st.session_state["result_table_main"] = None
            if "max_ball_table_main" not in st.session_state:
                st.session_state["max_ball_table_main"] = None
            main_task_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã", type=["xlsx"], accept_multiple_files=True,key="main_tasks_table")

            if main_task_files:
                new_file_names = [file.name for file in main_task_files]
                previous_file_names = [file.name for file in st.session_state["previous_files"]]
                
                if new_file_names != previous_file_names:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    st.session_state["good_cols"] = []
                    st.session_state["result_table_main"] = None
                    st.session_state["max_ball_table_main"] = None
                    st.session_state["previous_files"] = main_task_files 
                
                sorted_files = sort_files_by_number(main_task_files)
                 # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                with st.expander("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Ñ–∞–π–ª–æ–≤", expanded=False):
                    # Drag-and-drop —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                    file_names = [file.name for file in sorted_files]
                    ordered_file_names = sort_items(file_names, direction="vertical", key="sortable_list")

                    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                    main_task_files = [file for name in ordered_file_names for file in sorted_files if file.name == name]

                st.write("–§–∞–π–ª—ã –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:")
                for file in main_task_files:
                    st.write(f"üìÑ {file.name}")
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—É–º–º –∏–∑ —Ñ–∞–π–ª–æ–≤
                all_sum_types = set()
                for task_file in main_task_files:
                    all_sum_types.update(load_and_extract_sum_types(task_file))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å—É–º–º –≤ session_state
                st.session_state["good_cols"] = list(all_sum_types)
                
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏ –ø–æ–∑–≤–æ–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
                new_good_cols = st.text_area("–¢–∏–ø—ã —Å—É–º–º –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü. –í—ã –º–æ–∂–µ—Ç–µ –∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).", value=", ".join(st.session_state["good_cols"]))
                    
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
                updated_good_cols = [col.strip() for col in new_good_cols.split(",")]
                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ç–∏–ø—ã —Å—É–º–º
                if updated_good_cols != st.session_state["good_cols"]:
                    st.session_state["good_cols"] = updated_good_cols
            
                    st.session_state["aggregation_needs_update"] = True

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
                if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é"):
                    
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è..."):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ —Ñ–ª–∞–≥ False, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é)
                        if st.session_state["aggregation_needs_update"]:
                            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                            st.session_state["result_table_main"] = aggregate_scores(
                                students, st.session_state["previous_files"], st.session_state["good_cols"]
                            )
                            st.session_state["max_ball_table_main"] = aggregate_max_ball_table(
                                st.session_state["previous_files"], st.session_state["good_cols"]
                            )
                            
                            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
                            st.session_state["aggregation_needs_update"] = False
                        else:
                            # –ï—Å–ª–∏ —Ñ–ª–∞–≥ False, –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–ª–∞–≥–∞
                            st.session_state["result_table_main"] = aggregate_scores(
                                students, st.session_state["previous_files"], st.session_state["good_cols"]
                            )
                            st.session_state["max_ball_table_main"] = aggregate_max_ball_table(
                                st.session_state["previous_files"], st.session_state["good_cols"]
                            )
                    
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
                if (
                    st.session_state["result_table_main"] is not None
                    and st.session_state["max_ball_table_main"] is not None
                ):
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    st.session_state["display_mode"] = st.radio(
                        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
                        options=["–í—Å–µ —Ç–∏–ø—ã —Å—É–º–º", "–ü–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–∏–ø–∞–º —Å—É–º–º"], 
                        index=["–í—Å–µ —Ç–∏–ø—ã —Å—É–º–º", "–ü–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–∏–ø–∞–º —Å—É–º–º"].index(st.session_state["display_mode"])
                    )
                    
                    # –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: –í—Å–µ —Ç–∏–ø—ã —Å—É–º–º
                    if st.session_state["display_mode"] == "–í—Å–µ —Ç–∏–ø—ã —Å—É–º–º":

                        # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –±–∞–ª–ª–æ–≤
                        st.subheader(f"–¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–ª–æ–≤ ‚Äî –í—Å–µ —Ç–∏–ø—ã —Å—É–º–º")
                        st.dataframe(st.session_state["result_table_main"], use_container_width=True)

                        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
                        valid_columns = [
                            (file, sum_type)
                            for file in st.session_state["max_ball_table_main"].columns
                            for sum_type in st.session_state["good_cols"]
                            if sum_type in st.session_state["max_ball_table_main"].index and not pd.isna(
                                st.session_state["max_ball_table_main"].at[sum_type, file]
                            )
                        ]

                        if valid_columns:
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                            multiindex_columns = pd.MultiIndex.from_tuples(valid_columns, names=["–§–∞–π–ª", "–¢–∏–ø —Å—É–º–º—ã"])
                            values = [
                                st.session_state["max_ball_table_main"].at[sum_type, file]
                                for file, sum_type in valid_columns
                            ]
                            final_table = pd.DataFrame([values], columns=multiindex_columns)

                            # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
                            st.subheader(f"–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å.–±–∞–ª–ª–æ–≤ ‚Äî –í—Å–µ —Ç–∏–ø—ã —Å—É–º–º")
                            st.dataframe(final_table, use_container_width=True)

                            

                            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            result_output_all = BytesIO()
                            with pd.ExcelWriter(result_output_all, engine='xlsxwriter') as writer:
                                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
                                result_table_download = st.session_state["result_table_main"].copy()
                                max_ball_table_download = final_table.copy()

                                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                                result_table_download.columns = [
                                    ' '.join(map(str, col)).strip() if isinstance(col, tuple) else col
                                    for col in result_table_download.columns
                                ]
                                max_ball_table_download.columns = [
                                    ' '.join(map(str, col)).strip() if isinstance(col, tuple) else col
                                    for col in max_ball_table_download.columns
                                ]

                                # –ó–∞–ø–∏—Å—å —Ç–∞–±–ª–∏—Ü
                                result_table_download.to_excel(writer, index=True, sheet_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                                max_ball_table_download.to_excel(writer, index=True, sheet_name="–ú–∞–∫—Å –ë–∞–ª–ª—ã")

                                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                                for sheet_name in writer.sheets:
                                    worksheet = writer.sheets[sheet_name]
                                    dataframe = result_table_download if sheet_name == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" else max_ball_table_download
                                    for idx, col in enumerate(dataframe.columns):
                                        max_length = max(
                                            dataframe[col].astype(str).map(len).max(),
                                            len(str(col))
                                        ) + 2
                                        worksheet.set_column(idx + 1, idx + 1, max_length)

                            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            st.download_button(
                                label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–í—Å–µ —Ç–∏–ø—ã —Å—É–º–º)",
                                data=result_output_all.getvalue(),
                                file_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–≤—Å–µ_—Ç–∏–ø—ã_—Å—É–º–º.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                        else:
                            st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.")

                    elif st.session_state["display_mode"] == "–ü–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–∏–ø–∞–º —Å—É–º–º":
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è
                       
                            
                        for good_col in st.session_state["good_cols"]:
                            # –ù–∞–π—Ç–∏ —Å—Ç–æ–ª–±—Ü—ã, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–∏–ø—É —Å—É–º–º—ã
                            matching_cols = [
                                col for col in st.session_state["result_table_main"].columns if col[1] == good_col
                            ]
                            
                            if matching_cols:
                                # –§–∏–ª—å—Ç—Ä—É–µ–º result_table_main –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
                                filtered_result_table = st.session_state["result_table_main"].loc[:, matching_cols]

                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–∞–ª–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å—É–º–º—ã
                                st.subheader(f"–¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–ª–æ–≤ ‚Äî {good_col}")
                                st.dataframe(filtered_result_table, use_container_width=True)

                                # –§–∏–ª—å—Ç—Ä—É–µ–º max_ball_table_main –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å—É–º–º—ã
                                if good_col in st.session_state["max_ball_table_main"].index:
                                    filtered_max_ball_table = st.session_state["max_ball_table_main"].loc[good_col]
                                    filtered_max_ball_table = filtered_max_ball_table.to_frame().transpose()

                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
                                    st.subheader(f"–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å.–±–∞–ª–ª–æ–≤ ‚Äî {good_col}")
                                    st.dataframe(filtered_max_ball_table, use_container_width=True)
                                else:
                                    st.warning(f"–î–ª—è —Ç–∏–ø–∞ —Å—É–º–º—ã {good_col} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.")

                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        result_output_separate = BytesIO()
                        with pd.ExcelWriter(result_output_separate, engine="xlsxwriter") as writer:
                            for good_col in st.session_state["good_cols"]:
                                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å—É–º–º—ã
                                matching_cols = [
                                    col for col in st.session_state["result_table_main"].columns if col[1] == good_col
                                ]
                                if matching_cols:
                                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                                    filtered_result_table = st.session_state["result_table_main"].loc[:, matching_cols]
                                    filtered_result_table.columns = [
                                        " ".join(map(str, col)).strip() if isinstance(col, tuple) else col
                                        for col in filtered_result_table.columns
                                    ]
                                    filtered_result_table.to_excel(
                                        writer, index=True, sheet_name=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_{good_col}"
                                    )

                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ max_ball_table_main
                            max_ball_table_download = st.session_state["max_ball_table_main"].copy()
                            max_ball_table_download.columns = [
                                " ".join(map(str, col)).strip() if isinstance(col, tuple) else col
                                for col in max_ball_table_download.columns
                            ]
                            max_ball_table_download.to_excel(
                                writer, index=True, sheet_name="–ú–∞–∫—Å –ë–∞–ª–ª—ã"
                            )

                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                            for sheet_name in writer.sheets:
                                worksheet = writer.sheets[sheet_name]
                                dataframe = max_ball_table_download if sheet_name == "–ú–∞–∫—Å –ë–∞–ª–ª—ã" else filtered_result_table
                                for idx, col in enumerate(dataframe.columns):
                                    max_length = max(
                                        dataframe[col].astype(str).map(len).max(), len(str(col))
                                    ) + 2
                                    worksheet.set_column(idx + 1, idx + 1, max_length)

                        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã)",
                            data=result_output_separate.getvalue(),
                            file_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ_—Ç–∏–ø–∞–º_—Å—É–º–º.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        )
        
            

            
    # --- –ë–ª–æ–∫ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    elif selected_block == "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤":
        st.header("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤")

        st.markdown("""
        –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:

        1. üì• **–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª** *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.xlsx* —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        2. üìÅ **–°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É** *'–í–æ–ø—Ä–æ—Å—ã'* —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        """)
        st.divider()

        students = []
        # –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        excluded_students = ['–¢–µ—Å—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–¢–µ—Å—Ç –ê–Ω–Ω–∞', '–¢–µ—Å—Ç –¢–µ—Å—Ç2', '–¢–µ—Å—Ç–æ–≤ –ù–∏–∫', '–¢–µ—Å—Ç –ù–∏–∫–∏—Ç–∞', '–¢–µ—Å—Ç –§–æ—Ç–æ—Ñ–æ–Ω']

        # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.subheader("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))

        if option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã":
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", type=["xlsx"], key="questions")
            if uploaded_file:
                students = get_students_from_file(uploaded_file, excluded_students)
        else:
            # –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            students_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:")
            students = students_input.split("\n")
            students = [s.strip() for s in students if s.strip()]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–æ–π
        if not students:
            st.warning("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            with st.expander("C–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"):
                editable_students = st.text_area("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", "\n".join(students))
                students = editable_students.split("\n")
                students = [s.strip() for s in students if s.strip()]
            
        st.subheader("–í–æ–ø—Ä–æ—Å—ã")
        # –ö–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏", type=["xlsx", "txt"], accept_multiple_files=True)

        if question_files:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            filtered_files = filter_question_files(question_files)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            sorted_files = sort_files_by_number(filtered_files)

            # –í—ã–≤–æ–¥–∏–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
            st.write("–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file in sorted_files:
                st.write(file.name)
            for file in sorted_files:
                if file.name.endswith('.txt'):
                    question_id = file.name[:4]  # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ question_id ‚Äî –ø–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞
                    author = find_author(question_id, [f.name for f in sorted_files])

            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤"):
                try:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    result_table, unsent_questions, error_questions = process_question_files(students, [file.name for file in sorted_files], sorted_files)

                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
                    if not result_table.empty:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ "—Ö–æ—Ä–æ—à–∏–µ", –∏—Ö –Ω–∞–¥–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ø—É–±–ª–∏—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.
                        </p>
                        """, unsafe_allow_html=True)
                        st.dataframe(result_table)
                        
                    else:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ "—Ö–æ—Ä–æ—à–∏–µ", –∏—Ö –Ω–∞–¥–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ø—É–±–ª–∏—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.
                        </p>
                        """, unsafe_allow_html=True)
                        st.write("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

                    st.subheader("–ù–µ—Ä–∞–∑–æ—Å–ª–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
                    if unsent_questions:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –æ–Ω–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –∏—Ç–æ–≥–∞—Ö. –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.
                        </p>
                        """, unsafe_allow_html=True)
                        for key, value in unsent_questions.items():
                            st.text(f"–í–æ–ø—Ä–æ—Å {key}:\n{value}")
                    else:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –æ–Ω–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –∏—Ç–æ–≥–∞—Ö. –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.
                        </p>
                        """, unsafe_allow_html=True)
                        st.write("–ù–µ—Ç –Ω–µ—Ä–∞–∑–æ—Å–ª–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
                        

                    st.subheader("–û—à–∏–±–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
                    if error_questions:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –í —Å–ª—É—á–∞–µ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.
                        </p>
                        """, unsafe_allow_html=True)
                        for key, value in error_questions.items():
                            st.text(f"–í–æ–ø—Ä–æ—Å {key}:\n{value}")
                    else:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –í —Å–ª—É—á–∞–µ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.
                        </p>
                        """, unsafe_allow_html=True)
                        st.write("–û—à–∏–±–æ–∫ –Ω–µ—Ç.")

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        result_table.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
                    output.seek(0)

                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                        data=output,
                        file_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")


    # --- –ë–ª–æ–∫ 3: –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å ---
    elif selected_block == "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å":
        st.header("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        st.markdown("""
        –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:

        1. üì• **–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª** *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.xlsx* —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        2. üì• **–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª** *–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å.xlsx* —Å –ø–∞–ø–∫–∏ '–í–æ–ø—Ä–æ—Å—ã' –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        """)
       
        st.divider()
        
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

        students = []
        excluded_students = ['–¢–µ—Å—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–¢–µ—Å—Ç –ê–Ω–Ω–∞', '–¢–µ—Å—Ç –¢–µ—Å—Ç2', '–¢–µ—Å—Ç–æ–≤ –ù–∏–∫', '–¢–µ—Å—Ç –ù–∏–∫–∏—Ç–∞', '–¢–µ—Å—Ç –§–æ—Ç–æ—Ñ–æ–Ω']

        st.subheader("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))

        if option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã":
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", type=["xlsx"], key="attendance")
            if uploaded_file:
                students = get_students_from_file(uploaded_file, excluded_students)
        else:
            students_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:")
            students = students_input.split("\n")
            students = [s.strip() for s in students if s.strip()]

        if not students:
            st.warning("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            with st.expander("C–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"):
                editable_students = st.text_area("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", "\n".join(students))
                students = editable_students.split("\n")
                students = [s.strip() for s in students if s.strip()]

            st.subheader("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å")
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            
            
            students_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å.xlsx", type=["xlsx", "xls"])
            if students_file:
                try:
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è..."):
                        result_table = process_attendance(students_file, students)

                        # –í—ã–≤–æ–¥–∏–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞")
                        st.dataframe(result_table)

                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        buffer = BytesIO()
                        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                            result_table.to_excel(writer, index=True, sheet_name="–†–µ–∑—É–ª—å—Ç–∞—Ç")
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                            data=buffer.getvalue(),
                            file_name="–†–µ–∑—É–ª—å—Ç–∞—Ç_–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å—é.")