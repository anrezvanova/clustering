import streamlit as st
import os
from io import BytesIO
from utils.clustering_comments_dbscan import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
from utils.search_notebooks import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ—É—Ç–±—É–∫–∞–º
from utils.results_students import * # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
def sort_files_by_number(files):
    def extract_number(file_name):
        match = re.search(r'\d+', file_name)
        return int(match.group()) if match else float('inf')
    return sorted(files, key=lambda f: extract_number(f.name))

st.title("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü")
# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ—É—Ç–±—É–∫–∞–º", "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"])


# --- –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ---
with tab1:
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤! üëãüèª")
    st.write("üìÑ –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx) –Ω–∞ Google –î–∏—Å–∫–µ.")
    st.write("‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä—ã.")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü", type=['xlsx'],accept_multiple_files=False,key="fileUploader")

    if uploaded_file is not None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
        with open(f"./temp/{uploaded_file.name}", "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        file_path = f"./temp/{uploaded_file.name}"
        clustered_data = main(file_path, "–°—Ç—É–¥–µ–Ω—Ç", "–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if clustered_data is not None:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
            def highlight_tasks_and_clusters(val):
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '---', –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                if '---' in str(val):
                    return 'background-color: #ccffcc;'  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
                return ""  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            styled_data = clustered_data.style.map(highlight_tasks_and_clusters)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é
            styled_data = clustered_data.style.map(highlight_tasks_and_clusters)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—à–∏—Ä–∏–Ω—É –∫ —Å—Ç–æ–ª–±—Ü–∞–º
            col_widths = {
                col: max(clustered_data[col].astype(str).map(len).max(), len(col)) + 5
                for col in clustered_data.columns
            }
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            for col, width in col_widths.items():
                styled_data.set_properties(subset=[col], **{'width': f'{width}ch'})

            st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:")
            st.table(styled_data)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º DataFrame —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π
        else:
            st.write("–û—à–∏–±–∫–∞: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã—Ö.")

# --- –ü–æ–∏—Å–∫ –ø–æ –Ω–æ—É—Ç–±—É–∫–∞–º ---
with tab2:
    
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ Jupyter –Ω–æ—É—Ç–±—É–∫–∞–º üìÇ")
    
    st.write("""**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§–ë–ú–§**: –ø—Ä–æ—à–ª—ã–µ –∑–∞–¥–∞–Ω–∏—è –ª–µ–∂–∞—Ç –≤ ThetaHat.–ú–∞—Ç–µ—Ä–∏–∞–ª—ã | NDA | –¥–æ—Å—Ç—É–ø = ph@ds => Phystech@DataScience => **Ph@DS –í–ï–°–ù–ê 2024**""")
    st.write("""**Ph@ds**: –ø—Ä–æ—à–ª—ã–µ –∑–∞–¥–∞–Ω–∏—è –ª–µ–∂–∞—Ç –≤ ThetaHat.–ú–∞—Ç–µ—Ä–∏–∞–ª—ã | NDA | –¥–æ—Å—Ç—É–ø = ph@ds => Phystech@DataScience => **Ph@DS –û–°–ï–ù–¨ 2023**""")

    # –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
    index_base_dir = "index"

    st.subheader("–ü–æ–∏—Å–∫ –ø–æ –Ω–æ—É—Ç–±—É–∫–∞–º")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(index_base_dir):
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ `index`
        index_names = [name for name in os.listdir(index_base_dir) if os.path.isdir(os.path.join(index_base_dir, name))]

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏, –≤—ã–≤–æ–¥–∏–º –∏—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞
        if index_names:
            selected_index = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞", index_names)

            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
            selected_index_path = os.path.join(index_base_dir, selected_index)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
            index_searcher = IndexSearcher(selected_index_path)

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_word = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            if st.button("–ò—Å–∫–∞—Ç—å") and search_word:
                results = index_searcher.search(search_word)
                if results:
                    st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                    for path in results:
                        st.write(path)  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                else:
                    st.write("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if st.button("–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫–æ–≤–∏–∫"):
                index_searcher.close()
                st.write("–ü–æ–∏—Å–∫–æ–≤–∏–∫ –∑–∞–∫—Ä—ã—Ç.")
        else:
            st.warning("–í –ø–∞–ø–∫–µ `index` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏.")
    else:
        st.error("–ü–∞–ø–∫–∞ `index` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è.")

# --- –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å ---
with tab3:

    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∑–∞ —Å–µ–º–µ—Å—Ç—Ä!üëãüèª ")
    
    st.markdown("""
    –° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:
    - **–°–æ–±—Ä–∞—Ç—å –±–∞–ª–ª—ã –ø–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º** üìù
    - **–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–æ—Ç–µ** üí¨
    - **–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π** üìÖ
    """)

    st.markdown("---")


     # –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞
    selected_block = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
        ("–ê–≥—Ä–µ–≥–∞—Ü–∏—è –±–∞–ª–ª–æ–≤", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤", "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å")
    )

    # --- –ë–ª–æ–∫ 1: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –±–∞–ª–ª–æ–≤ ---
    if selected_block == "–ê–≥—Ä–µ–≥–∞—Ü–∏—è –±–∞–ª–ª–æ–≤":
        # --- –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å ---
        st.header("–ê–≥—Ä–µ–≥–∞—Ü–∏—è –±–∞–ª–ª–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")

        st.markdown("""
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤:

        1. üì• **–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª** *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.xlsx* —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        2. üìÅ **–°–∫–∞—á–∞–π—Ç–µ –ø–∞–ø–∫—É** *'–ü—Ä–æ–≤–µ—Ä–∫–∞ –î–ó'* —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å Google –î–∏—Å–∫–∞.
        """)

        st.divider()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        students = []
        # –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        excluded_students = ['–¢–µ—Å—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–¢–µ—Å—Ç –ê–Ω–Ω–∞', '–¢–µ—Å—Ç –¢–µ—Å—Ç2', '–¢–µ—Å—Ç–æ–≤ –ù–∏–∫']

        # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –°–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.markdown("### –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

        st.markdown("""
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.xlsx* –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.
        """)
        option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))

        if option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã":
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", type=["xlsx"])
            if uploaded_file:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
                st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                students = get_students_from_file(uploaded_file, excluded_students)
        else:
            # –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            students_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:")
            students = students_input.split("\n")
            students = [s.strip() for s in students if s.strip()]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–æ–π
        if not students:
            st.warning("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            with st.expander("C–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"):
                editable_students = st.text_area("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", "\n".join(students))
                students = editable_students.split("\n")
                students = [s.strip() for s in students if s.strip()]
            

            # --- –í—ã–±–æ—Ä –∫—É—Ä—Å–∞ ---
            st.markdown("### –í—ã–±–æ—Ä –∫—É—Ä—Å–∞")
            course = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
                ["ds3-–ø–æ—Ç–æ–∫", "ds4-–ø–æ—Ç–æ–∫", "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "Ph@ds/–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§–ë–ú–§"]
            )


            if course in ["ds3-–ø–æ—Ç–æ–∫"]:
                # --- –û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞ ---
                
                st.subheader('–û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü DS3')
                st.markdown("""
                <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ ST/SP/ML - –æ—Å–Ω–æ–≤–Ω—É—é —Å–¥–∞—á—É.
                </p>
                """, unsafe_allow_html=True)
                main_task_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Å–¥–∞—á–∏", type=["xlsx"], accept_multiple_files=True,key="main_tasks_ds3")

                if main_task_files:
                    main_task_files = sort_files_by_number(main_task_files)
                    st.write("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                    for file in main_task_files:
                        st.write(file.name)

                     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                    if 'result_table_main' not in st.session_state or 'max_ball_table_main' not in st.session_state:
                        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è ds3_–ø–æ—Ç–æ–∫–∞ - –û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞", key="ds3_main_"):
                            good_cols = ['–°—Ç—É–¥–µ–Ω—Ç'] + pd.read_excel(main_task_files[0], sheet_name='–°—Ç—É–¥–µ–Ω—Ç—ã').columns[3:].tolist()
                            result_table_main = aggregate_scores(students, main_task_files)
                            max_ball_table_main = aggregate_max_ball_table(main_task_files)

                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                            st.session_state['result_table_main'] = result_table_main
                            st.session_state['max_ball_table_main'] = max_ball_table_main

                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ session_state, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö
                    if 'result_table_main' in st.session_state:
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ds3-–ø–æ—Ç–æ–∫–∞ (–û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞)")
                        st.dataframe(st.session_state['result_table_main'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è ds3-–ø–æ—Ç–æ–∫–∞ (–û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞)")
                        st.dataframe(st.session_state['max_ball_table_main'], use_container_width=True)
                        
                        result_table_main = st.session_state['result_table_main']
                        max_ball_table_main = st.session_state['max_ball_table_main'] 
                        # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π –∏–Ω–¥–µ–∫—Å–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
                        result_table_main.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_main.columns]
                        max_ball_table_main.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in max_ball_table_main.columns]
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                        result_output = BytesIO()
                        with pd.ExcelWriter(result_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_main'].to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')

                        max_ball_output = BytesIO()
                        with pd.ExcelWriter(max_ball_output, engine='xlsxwriter') as writer:
                            st.session_state['max_ball_table_main'].to_excel(writer, index=False, sheet_name='–ú–∞–∫—Å –ë–∞–ª–ª—ã')

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–¥–∞—á–∏",
                            data=result_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–æ—Å–Ω–æ–≤–Ω–∞—è_—Å–¥–∞—á–∞.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–¥–∞—á–∏",
                            data=max_ball_output.getvalue(),
                            file_name='–ú–∞–∫—Å_–±–∞–ª–ª—ã_–æ—Å–Ω–æ–≤–Ω–∞—è_—Å–¥–∞—á–∞.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                # --- –î–æ—Ä–µ—à–∫–∞ ---
                st.subheader("–î–æ—Ä–µ—à–∫–∞ - –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü DS3")
                st.markdown("""
                <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ ST/SP/ML - –¥–æ—Ä–µ—à–∫–∏.
                </p>
                """, unsafe_allow_html=True)
                retake_task_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ—Ä–µ—à–∫–∏", type=["xlsx"], accept_multiple_files=True, key="ds3_retake_tasks")

                if retake_task_files:
                    retake_task_files = sort_files_by_number(retake_task_files)
                    st.write("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ—Ä–µ—à–∫–∏:")
                    for file in retake_task_files:
                        st.write(file.name)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                    if 'result_table_additional' not in st.session_state or 'result_table_reset' not in st.session_state or 'max_ball_table_retake' not in st.session_state:
                        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ds3", key="ds3_dor"):
                            good_cols_additional = ['–°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞']
                            good_cols_reset = ['–°—É–º–º–∞ —Å –Ω—É–ª—è']

                            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è "–°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞"
                            result_table_additional = aggregate_scores(students, retake_task_files, good_cols_additional)

                            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è "–°—É–º–º–∞ —Å –Ω—É–ª—è"
                            result_table_reset = aggregate_scores(students, retake_task_files, good_cols_reset)

                            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
                            max_ball_table_retake = aggregate_max_ball_table(retake_task_files)


                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session_state
                            st.session_state['result_table_additional'] = result_table_additional
                            st.session_state['result_table_reset'] = result_table_reset
                            st.session_state['max_ball_table_retake'] = max_ball_table_retake

                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ session_state, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö
                    if 'result_table_additional' in st.session_state:
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ‚Äî –°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞")
                        st.dataframe(st.session_state['result_table_additional'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ‚Äî –°—É–º–º–∞ —Å –Ω—É–ª—è")
                        st.dataframe(st.session_state['result_table_reset'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –¥–æ—Ä–µ—à–∫–∏")
                        st.dataframe(st.session_state['max_ball_table_retake'], use_container_width=True)

                        result_table_additional = st.session_state['result_table_additional']
                        result_table_reset = st.session_state['result_table_reset'] 
                        max_ball_table_retake = st.session_state['max_ball_table_retake'] 
                        # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π –∏–Ω–¥–µ–∫—Å–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
                        result_table_additional.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_additional.columns]
                        result_table_reset.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_reset.columns]
                        max_ball_table_retake.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in max_ball_table_retake.columns]
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                        additional_output = BytesIO()
                        with pd.ExcelWriter(additional_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_additional'].to_excel(writer, index=False, sheet_name='–°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞')

                        reset_output = BytesIO()
                        with pd.ExcelWriter(reset_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_reset'].to_excel(writer, index=False, sheet_name='–°—É–º–º–∞ —Å –Ω—É–ª—è')

                        max_ball_output = BytesIO()
                        with pd.ExcelWriter(max_ball_output, engine='xlsxwriter') as writer:
                            st.session_state['max_ball_table_retake'].to_excel(writer, index=False, sheet_name='–ú–∞–∫—Å –ë–∞–ª–ª—ã')

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ds3 ‚Äî –°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞",
                            data=additional_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–¥–æ—Ä–µ—à–∫–∞_—Å—É–º–º–∞_–¥–æ–±–∞–≤–∫–∞.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ds3 ‚Äî –°—É–º–º–∞ —Å –Ω—É–ª—è",
                            data=reset_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–¥–æ—Ä–µ—à–∫–∞_—Å—É–º–º–∞_—Å_–Ω—É–ª—è.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ds3",
                            data=max_ball_output.getvalue(),
                            file_name='–ú–∞–∫—Å_–±–∞–ª–ª—ã_–¥–æ—Ä–µ—à–∫–∞.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

            elif course in ["ds4-–ø–æ—Ç–æ–∫"]:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫—É—Ä—Å–∞ "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"
                # --- –û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞ ---
                st.subheader("–û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü DS4")
                st.markdown("""
                <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Å–¥–∞—á—É.
                </p>
                """, unsafe_allow_html=True)
                main_task_files4 = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Å–¥–∞—á–∏ ds4", type=["xlsx"], accept_multiple_files=True, key="main_tasks_ds4")

                if main_task_files4:
                    main_task_files4 = sort_files_by_number(main_task_files4)
                    st.write("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è ds4:")
                    for file in main_task_files4:
                        st.write(file.name)

                     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                    if 'result_table_main' not in st.session_state or 'max_ball_table_main' not in st.session_state:
                        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è ds4_–ø–æ—Ç–æ–∫–∞ - –û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞", key="ds4_main_"):
                            good_cols = ['–°—Ç—É–¥–µ–Ω—Ç'] + pd.read_excel(main_task_files4[0], sheet_name='–°—Ç—É–¥–µ–Ω—Ç—ã').columns[3:].tolist()
                            result_table_main = aggregate_scores(students, main_task_files4)
                            max_ball_table_main = aggregate_max_ball_table(main_task_files4)

                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                            st.session_state['result_table_main'] = result_table_main
                            st.session_state['max_ball_table_main'] = max_ball_table_main

                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ session_state, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö
                    if 'result_table_main' in st.session_state:
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ds4-–ø–æ—Ç–æ–∫–∞ (–û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞)")
                        st.dataframe(st.session_state['result_table_main'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è ds4-–ø–æ—Ç–æ–∫–∞ (–û—Å–Ω–æ–≤–Ω–∞—è —Å–¥–∞—á–∞)")
                        st.dataframe(st.session_state['max_ball_table_main'], use_container_width=True)

                        result_table_main = st.session_state['result_table_main']
                        max_ball_table_main = st.session_state['max_ball_table_main'] 
                        # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π –∏–Ω–¥–µ–∫—Å–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
                        result_table_main.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_main.columns]
                        max_ball_table_main.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in max_ball_table_main.columns]
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                        result_output = BytesIO()
                        with pd.ExcelWriter(result_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_main'].to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')

                        max_ball_output = BytesIO()
                        with pd.ExcelWriter(max_ball_output, engine='xlsxwriter') as writer:
                            st.session_state['max_ball_table_main'].to_excel(writer, index=False, sheet_name='–ú–∞–∫—Å –ë–∞–ª–ª—ã')

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–¥–∞—á–∏",
                            data=result_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–æ—Å–Ω–æ–≤–Ω–∞—è_—Å–¥–∞—á–∞.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–¥–∞—á–∏",
                            data=max_ball_output.getvalue(),
                            file_name='–ú–∞–∫—Å_–±–∞–ª–ª—ã_–æ—Å–Ω–æ–≤–Ω–∞—è_—Å–¥–∞—á–∞.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                # --- –î–æ—Ä–µ—à–∫–∞ ---
                st.subheader("–î–æ—Ä–µ—à–∫–∞ - –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü DS4")
                st.markdown("""
                <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ—Ä–µ—à–∫–∏.
                </p>
                """, unsafe_allow_html=True)
                retake_task_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ—Ä–µ—à–∫–∏", type=["xlsx"], accept_multiple_files=True, key="ds4_retake_tasks")

                if retake_task_files:
                    retake_task_files = sort_files_by_number(retake_task_files)
                    st.write("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ—Ä–µ—à–∫–∏:")
                    for file in retake_task_files:
                        st.write(file.name)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                    if 'result_table_additional' not in st.session_state or 'result_table_reset' not in st.session_state or 'max_ball_table_retake' not in st.session_state:
                        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ds4", key="ds4_dor"):
                            good_cols_additional = ['–°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞']
                            good_cols_reset = ['–°—É–º–º–∞ —Å –Ω—É–ª—è']

                            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è "–°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞"
                            result_table_additional = aggregate_scores(students, retake_task_files, good_cols_additional)

                            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è "–°—É–º–º–∞ —Å –Ω—É–ª—è"
                            result_table_reset = aggregate_scores(students, retake_task_files, good_cols_reset)

                            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
                            max_ball_table_retake = aggregate_max_ball_table(retake_task_files)


                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session_state
                            st.session_state['result_table_additional'] = result_table_additional
                            st.session_state['result_table_reset'] = result_table_reset
                            st.session_state['max_ball_table_retake'] = max_ball_table_retake

                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ session_state, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö
                    if 'result_table_additional' in st.session_state:
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ‚Äî –°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞")
                        st.dataframe(st.session_state['result_table_additional'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ‚Äî –°—É–º–º–∞ —Å –Ω—É–ª—è")
                        st.dataframe(st.session_state['result_table_reset'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –¥–æ—Ä–µ—à–∫–∏")
                        st.dataframe(st.session_state['max_ball_table_retake'], use_container_width=True)

                        result_table_additional = st.session_state['result_table_additional'] 
                        result_table_reset = st.session_state['result_table_reset']
                        max_ball_table_retake = st.session_state['max_ball_table_retake']
                        # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π –∏–Ω–¥–µ–∫—Å–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
                        result_table_additional.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_additional.columns]
                        result_table_reset.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_reset.columns]
                        max_ball_table_retake.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in max_ball_table_retake.columns]
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                        additional_output = BytesIO()
                        with pd.ExcelWriter(additional_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_additional'].to_excel(writer, index=False, sheet_name='–°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞')

                        reset_output = BytesIO()
                        with pd.ExcelWriter(reset_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_reset'].to_excel(writer, index=False, sheet_name='–°—É–º–º–∞ —Å –Ω—É–ª—è')

                        max_ball_output = BytesIO()
                        with pd.ExcelWriter(max_ball_output, engine='xlsxwriter') as writer:
                            st.session_state['max_ball_table_retake'].to_excel(writer, index=False, sheet_name='–ú–∞–∫—Å –ë–∞–ª–ª—ã')

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ds4 ‚Äî –°—É–º–º–∞ –¥–æ–±–∞–≤–∫–∞",
                            data=additional_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–¥–æ—Ä–µ—à–∫–∞_—Å—É–º–º–∞_–¥–æ–±–∞–≤–∫–∞.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ds4 ‚Äî –°—É–º–º–∞ —Å –Ω—É–ª—è",
                            data=reset_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–¥–æ—Ä–µ—à–∫–∞_—Å—É–º–º–∞_—Å_–Ω—É–ª—è.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –¥–æ—Ä–µ—à–∫–∏ ds4",
                            data=max_ball_output.getvalue(),
                            file_name='–ú–∞–∫—Å_–±–∞–ª–ª—ã_–¥–æ—Ä–µ—à–∫–∞.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

            elif course == "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö":
                # --- –î–ó ---
                st.subheader("–í–≤–ê–î - –î–ó")
                main_task_files_ad = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –î–ó", type=["xlsx"], accept_multiple_files=True, key="ad_hw")

                if main_task_files_ad:
                    main_task_files_ad = sort_files_by_number(main_task_files_ad)
                    st.write("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                    for file in main_task_files_ad:
                        st.write(file.name)

                    if 'result_table_hw_ad' not in st.session_state or 'max_ball_table_hw_ad' not in st.session_state:
                        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è –î–ó", key="sem_phds"):
                            result_table_hw_ad = aggregate_scores(students, main_task_files_ad)
                            max_ball_table_hw_ad = aggregate_max_ball_table(main_task_files_ad)

                            # –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                            valid_columns = [(file, sum_type) for file in max_ball_table_hw_ad.columns
                                            for sum_type in max_ball_table_hw_ad.index
                                            if not pd.isna(max_ball_table_hw_ad.at[sum_type, file])]

                            multiindex_columns = pd.MultiIndex.from_tuples(valid_columns, names=["–§–∞–π–ª", "–¢–∏–ø —Å—É–º–º—ã"])
                            values = [max_ball_table_hw_ad.at[sum_type, file] for file, sum_type in valid_columns]
                            final_table_hw = pd.DataFrame([values], columns=multiindex_columns)
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session_state
                            st.session_state['result_table_hw_ad'] = result_table_hw_ad
                            st.session_state['max_ball_table_hw_ad'] = final_table_hw

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ session_state
                    if 'result_table_hw_ad' in st.session_state:
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –í–≤–ê–î (–î–ó)")
                        st.dataframe(st.session_state['result_table_hw_ad'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –í–≤–ê–î (–î–ó)")
                        st.dataframe(st.session_state['max_ball_table_hw_ad'], use_container_width=True)

                        # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π MultiIndex –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
                        
                        result_table_hw_ad = st.session_state['result_table_hw_ad']
                        final_table_hw = st.session_state['max_ball_table_hw_ad']
                        result_table_hw_ad.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_hw_ad.columns]
                        final_table_hw.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in final_table_hw.columns]
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                        seminar_output = BytesIO()
                        with pd.ExcelWriter(seminar_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_hw_ad'].to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')

                        max_ball_seminar_output = BytesIO()
                        with pd.ExcelWriter(max_ball_seminar_output, engine='xlsxwriter') as writer:
                            st.session_state['max_ball_table_hw_ad'].to_excel(writer, index=False, sheet_name='–ú–∞–∫—Å –ë–∞–ª–ª—ã')

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –î–ó",
                            data=seminar_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–î–ó.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –î–ó",
                            data=max_ball_seminar_output.getvalue(),
                            file_name='–ú–∞–∫—Å_–±–∞–ª–ª—ã_–î–ó.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                # --- –î–æ—Ä–µ—à–∫–∏ ---
                st.subheader("–í–≤–ê–î - –¥–æ—Ä–µ—à–∫–∏")
                main_task_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–æ—Ä–µ—à–µ–∫", type=["xlsx"], accept_multiple_files=True, key="ad_dor")

                if main_task_files:
                    main_task_files = sort_files_by_number(main_task_files)
                    st.write("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                    for file in main_task_files:
                        st.write(file.name)

                    if 'result_table_ad_dor' not in st.session_state or 'max_ball_table_ad_dor' not in st.session_state:
                        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è –¥–æ—Ä–µ—à–µ–∫ - –í–≤–ê–î", key="hw_phds"):
                            # –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —Ç–∏–ø–æ–≤ —Å—É–º–º
                            good_cols = ['–î–æ–±–∞–≤–∫–∞ –õ', '–î–æ–±–∞–≤–∫–∞ –°', '–î–æ–±–∞–≤–∫–∞ –§']
                            result_table_ad_dor = aggregate_scores(students, main_task_files, good_cols)
                            max_ball_table_ad_dor = aggregate_max_ball_table(main_task_files)

                            

                            # –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å—É–º–º
                            valid_columns = [
                                (file, sum_type) for file in max_ball_table_ad_dor.columns
                                for sum_type in max_ball_table_ad_dor.index
                                if sum_type in good_cols and not pd.isna(max_ball_table_ad_dor.at[sum_type, file])
                            ]

                            multiindex_columns = pd.MultiIndex.from_tuples(valid_columns, names=["–§–∞–π–ª", "–¢–∏–ø —Å—É–º–º—ã"])
                            values = [max_ball_table_ad_dor.at[sum_type, file] for file, sum_type in valid_columns]
                            final_table = pd.DataFrame([values], columns=multiindex_columns)

                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session_state
                            st.session_state['result_table_ad_dor'] = result_table_ad_dor
                            st.session_state['max_ball_table_ad_dor'] = final_table

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ session_state
                    if 'result_table_ad_dor' in st.session_state:
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –í–≤–ê–î (–¥–æ—Ä–µ—à–∫–∏)")
                        st.dataframe(st.session_state['result_table_ad_dor'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –í–≤–ê–î (–¥–æ—Ä–µ—à–∫–∏)")
                        st.dataframe(st.session_state['max_ball_table_ad_dor'], use_container_width=True)

                        result_table_ad_dor = st.session_state['result_table_ad_dor'] 
                        final_table = st.session_state['max_ball_table_ad_dor'] 
                        # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π MultiIndex –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
                        result_table_ad_dor.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_ad_dor.columns]
                        final_table.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in final_table.columns]
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                        hw_output = BytesIO()
                        with pd.ExcelWriter(hw_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_ad_dor'].to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')

                        max_ball_hw_output = BytesIO()
                        with pd.ExcelWriter(max_ball_hw_output, engine='xlsxwriter') as writer:
                            st.session_state['max_ball_table_ad_dor'].to_excel(writer, index=False, sheet_name='–ú–∞–∫—Å –ë–∞–ª–ª—ã')

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ—Ä–µ—à–µ–∫",
                            data=hw_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–¥–æ—Ä–µ—à–∫–∏.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –¥–æ—Ä–µ—à–µ–∫",
                            data=max_ball_hw_output.getvalue(),
                            file_name='–ú–∞–∫—Å_–±–∞–ª–ª—ã_–¥–æ—Ä–µ—à–∫–∏.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

            elif course == "Ph@ds/–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§–ë–ú–§":
                # --- –°–µ–º–∏–Ω–∞—Ä ---
                st.subheader("–°–µ–º–∏–Ω–∞—Ä - –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü ph@ds")
                main_task_files_ph = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–µ–º–∏–Ω–∞—Ä–æ–≤", type=["xlsx"], accept_multiple_files=True, key="phds_sem")

                if main_task_files_ph:
                    main_task_files_ph = sort_files_by_number(main_task_files_ph)
                    st.write("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ph@ds:")
                    for file in main_task_files_ph:
                        st.write(file.name)

                    if 'result_table_seminar' not in st.session_state or 'max_ball_table_seminar' not in st.session_state:
                        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è –°–µ–º–∏–Ω–∞—Ä–∞ - ph@ds", key="sem_phds"):
                            result_table_seminar = aggregate_scores(students, main_task_files_ph)
                            max_ball_table_seminar = aggregate_max_ball_table(main_task_files_ph)

                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session_state
                            st.session_state['result_table_seminar'] = result_table_seminar
                            st.session_state['max_ball_table_seminar'] = max_ball_table_seminar

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ session_state
                    if 'result_table_seminar' in st.session_state:
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ph@ds (–°–µ–º–∏–Ω–∞—Ä)")
                        st.dataframe(st.session_state['result_table_seminar'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è ph@ds (–°–µ–º–∏–Ω–∞—Ä)")
                        st.dataframe(st.session_state['max_ball_table_seminar'], use_container_width=True)

                        # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π MultiIndex –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
                        
                        result_table_seminar = st.session_state['result_table_seminar']
                        max_ball_table_seminar = st.session_state['max_ball_table_seminar']
                        result_table_seminar.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_seminar.columns]
                        max_ball_table_seminar.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in max_ball_table_seminar.columns]
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                        seminar_output = BytesIO()
                        with pd.ExcelWriter(seminar_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_seminar'].to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')

                        max_ball_seminar_output = BytesIO()
                        with pd.ExcelWriter(max_ball_seminar_output, engine='xlsxwriter') as writer:
                            st.session_state['max_ball_table_seminar'].to_excel(writer, index=False, sheet_name='–ú–∞–∫—Å –ë–∞–ª–ª—ã')

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–µ–º–∏–Ω–∞—Ä–æ–≤",
                            data=seminar_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_—Å–µ–º–∏–Ω–∞—Ä.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–µ–º–∏–Ω–∞—Ä–æ–≤",
                            data=max_ball_seminar_output.getvalue(),
                            file_name='–ú–∞–∫—Å_–±–∞–ª–ª—ã_—Å–µ–º–∏–Ω–∞—Ä.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                # --- –î–ó ---
                st.subheader("–î–ó - –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü ph@ds")
                main_task_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –î–ó", type=["xlsx"], accept_multiple_files=True, key="phds_hw")

                if main_task_files:
                    main_task_files = sort_files_by_number(main_task_files)
                    st.write("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                    for file in main_task_files:
                        st.write(file.name)

                    if 'result_table_main_hw' not in st.session_state or 'max_ball_table_main_hw' not in st.session_state:
                        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è –î–ó - ph@ds", key="hw_phds"):
                            result_table_main_hw = aggregate_scores(students, main_task_files)
                            max_ball_table_main_hw = aggregate_max_ball_table(main_task_files)

                            # –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                            valid_columns = [(file, sum_type) for file in max_ball_table_main_hw.columns
                                            for sum_type in max_ball_table_main_hw.index
                                            if not pd.isna(max_ball_table_main_hw.at[sum_type, file])]

                            multiindex_columns = pd.MultiIndex.from_tuples(valid_columns, names=["–§–∞–π–ª", "–¢–∏–ø —Å—É–º–º—ã"])
                            values = [max_ball_table_main_hw.at[sum_type, file] for file, sum_type in valid_columns]
                            final_table = pd.DataFrame([values], columns=multiindex_columns)

                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session_state
                            st.session_state['result_table_main_hw'] = result_table_main_hw
                            st.session_state['max_ball_table_main_hw'] = final_table

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ session_state
                    if 'result_table_main_hw' in st.session_state:
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ph@ds (–î–ó)")
                        st.dataframe(st.session_state['result_table_main_hw'], use_container_width=True)

                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è ph@ds (–î–ó)")
                        st.dataframe(st.session_state['max_ball_table_main_hw'], use_container_width=True)

                        result_table_main_hw = st.session_state['result_table_main_hw'] 
                        final_table = st.session_state['max_ball_table_main_hw'] 
                        # –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π MultiIndex –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
                        result_table_main_hw.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in result_table_main_hw.columns]
                        final_table.columns = [' '.join(map(str, col)).strip() if isinstance(col, tuple) else col for col in final_table.columns]
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                        hw_output = BytesIO()
                        with pd.ExcelWriter(hw_output, engine='xlsxwriter') as writer:
                            st.session_state['result_table_main_hw'].to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')

                        max_ball_hw_output = BytesIO()
                        with pd.ExcelWriter(max_ball_hw_output, engine='xlsxwriter') as writer:
                            st.session_state['max_ball_table_main_hw'].to_excel(writer, index=False, sheet_name='–ú–∞–∫—Å –ë–∞–ª–ª—ã')

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –î–ó",
                            data=hw_output.getvalue(),
                            file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–î–ó.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )

                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –î–ó",
                            data=max_ball_hw_output.getvalue(),
                            file_name='–ú–∞–∫—Å_–±–∞–ª–ª—ã_–î–ó.xlsx',
                            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )
                        
    # --- –ë–ª–æ–∫ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    elif selected_block == "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤":
        st.header("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤")

        st.markdown("""
        –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:

        1. üì• **–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª** *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.xlsx* —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        2. üìÅ **–°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É** *'–í–æ–ø—Ä–æ—Å—ã'* —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        """)
        st.divider()

        students = []
        # –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        excluded_students = ['–¢–µ—Å—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–¢–µ—Å—Ç –ê–Ω–Ω–∞', '–¢–µ—Å—Ç –¢–µ—Å—Ç2', '–¢–µ—Å—Ç–æ–≤ –ù–∏–∫']

        # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.subheader("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))

        if option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã":
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", type=["xlsx"])
            if uploaded_file:
                students = get_students_from_file(uploaded_file, excluded_students)
        else:
            # –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            students_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:")
            students = students_input.split("\n")
            students = [s.strip() for s in students if s.strip()]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–æ–π
        if not students:
            st.warning("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            with st.expander("C–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"):
                editable_students = st.text_area("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", "\n".join(students))
                students = editable_students.split("\n")
                students = [s.strip() for s in students if s.strip()]
            
        st.subheader("–í–æ–ø—Ä–æ—Å—ã")
        # –ö–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏", type=["xlsx", "txt"], accept_multiple_files=True)

        if question_files:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            filtered_files = filter_question_files(question_files)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            sorted_files = sort_files_by_number(filtered_files)

            # –í—ã–≤–æ–¥–∏–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
            st.write("–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file in sorted_files:
                st.write(file.name)
            for file in sorted_files:
                if file.name.endswith('.txt'):
                    question_id = file.name[:4]  # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ question_id ‚Äî –ø–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞
                    author = find_author(question_id, [f.name for f in sorted_files])

            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤"):
                try:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    result_table, unsent_questions, error_questions = process_question_files(students, [file.name for file in sorted_files], sorted_files)

                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
                    if not result_table.empty:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ "—Ö–æ—Ä–æ—à–∏–µ", –∏—Ö –Ω–∞–¥–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ø—É–±–ª–∏—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.
                        </p>
                        """, unsafe_allow_html=True)
                        st.dataframe(result_table)
                        
                    else:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ "—Ö–æ—Ä–æ—à–∏–µ", –∏—Ö –Ω–∞–¥–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ø—É–±–ª–∏—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.
                        </p>
                        """, unsafe_allow_html=True)
                        st.write("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

                    st.subheader("–ù–µ—Ä–∞–∑–æ—Å–ª–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
                    if unsent_questions:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –æ–Ω–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –∏—Ç–æ–≥–∞—Ö. –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.
                        </p>
                        """, unsafe_allow_html=True)
                        for key, value in unsent_questions.items():
                            st.text(f"–í–æ–ø—Ä–æ—Å {key}:\n{value}")
                    else:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –æ–Ω–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –∏—Ç–æ–≥–∞—Ö. –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.
                        </p>
                        """, unsafe_allow_html=True)
                        st.write("–ù–µ—Ç –Ω–µ—Ä–∞–∑–æ—Å–ª–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
                        

                    st.subheader("–û—à–∏–±–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
                    if error_questions:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –í —Å–ª—É—á–∞–µ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.
                        </p>
                        """, unsafe_allow_html=True)
                        for key, value in error_questions.items():
                            st.text(f"–í–æ–ø—Ä–æ—Å {key}:\n{value}")
                    else:
                        st.markdown("""
                        <p style="font-size: 12px; font-style: italic; color: #6c757d; background-color: #f8f9fa; padding: 5px; border-radius: 5px;">
                        –í —Å–ª—É—á–∞–µ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.
                        </p>
                        """, unsafe_allow_html=True)
                        st.write("–û—à–∏–±–æ–∫ –Ω–µ—Ç.")

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        result_table.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
                    output.seek(0)

                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                        data=output,
                        file_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")


    # --- –ë–ª–æ–∫ 3: –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å ---
    elif selected_block == "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å":
        st.header("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        st.markdown("""
        –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:

        1. üì• **–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª** *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.xlsx* —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        2. üì• **–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª** *–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å.xlsx* —Å –ø–∞–ø–∫–∏ '–í–æ–ø—Ä–æ—Å—ã' –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
        """)
       
        st.divider()
        
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

        students = []
        excluded_students = ['–¢–µ—Å—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–¢–µ—Å—Ç –ê–Ω–Ω–∞', '–¢–µ—Å—Ç –¢–µ—Å—Ç2', '–¢–µ—Å—Ç–æ–≤ –ù–∏–∫']

        st.subheader("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))

        if option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã":
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", type=["xlsx"])
            if uploaded_file:
                students = get_students_from_file(uploaded_file, excluded_students)
        else:
            students_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:")
            students = students_input.split("\n")
            students = [s.strip() for s in students if s.strip()]

        if not students:
            st.warning("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            with st.expander("C–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"):
                editable_students = st.text_area("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", "\n".join(students))
                students = editable_students.split("\n")
                students = [s.strip() for s in students if s.strip()]

        # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        st.subheader("–í—ã–±–æ—Ä –∫—É—Ä—Å–∞")



        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        default_teachers = {
            "ds3-–ø–æ—Ç–æ–∫": {
                "ST": ['–õ–∞—Ç—ã–ø–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–ü–æ–ª–æ–∑–æ–≤ –î–º–∏—Ç—Ä–∏–π'],
                "SP": ['–ö–ª–µ–π–¥–º–∞–Ω –ü–æ–ª–∏–Ω–∞', '–ü–ª–æ—Ç–Ω–∏–∫–æ–≤–∞ –î–∞—Ä—å—è'],
                "ML": ['–ú–µ–ª–µ—â–µ–Ω—è –ö—Å–µ–Ω–∏—è', '–ì–æ—Ä–±—É–ª–µ–≤ –ê–ª–µ–∫—Å–µ–π', '–¢—Ä–æ–µ—à–µ—Å—Ç–æ–≤–∞ –õ–∏–¥–∏—è']
            },
            "ds4-–ø–æ—Ç–æ–∫": {
                "DS4": ['–ö–æ–ª—Ç–∞–∫–æ–≤ –ú–∏—Ö–∞–∏–ª', '–ü–∞–Ω–µ–Ω–∫–æ –°–µ–º—ë–Ω']
            },
            "Ph@ds": {
                "Ph@ds": ['–ñ–¥–∞–Ω–æ–≤–∏—á –¢–∏–º–æ—Ñ–µ–π', '–õ–æ–≥–∏–Ω–æ–≤ –ê—Ä—Ç—ë–º', '–ë—Ä—É—Ç—Ç–∞–Ω –ú–∞—Ä–∏']
            },
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§–ë–ú–§": {
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§–ë–ú–§": ['–í–æ—Ä–æ–Ω–æ–≤–∞ –ê–ª–∏—Å–∞', '–ú–∞–¥–∞–Ω –ê—Ä–∏–Ω–∞']
            }
        }

        # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
        selected_course = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å", list(default_teachers.keys()))

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        teachers = default_teachers[selected_course]

        with st.expander("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", expanded=False):
            for block, teacher_list in teachers.items():
                st.write(f"–ë–ª–æ–∫: {block}")
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                updated_teachers = st.text_area(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –¥–ª—è {block}", "\n".join(teacher_list))
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                teachers[block] = [teacher.strip() for teacher in updated_teachers.split("\n") if teacher.strip()]

        st.subheader("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å")
        students_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å.xlsx", type=["xlsx", "xls"])
        if students_file:
            try:
                result_tables = process_attendance(students, students_file, teachers)

                for block, table in result_tables.items():
                    st.subheader(f"{block} –¢–∞–±–ª–∏—Ü–∞")
                    st.dataframe(table)

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å—é.")